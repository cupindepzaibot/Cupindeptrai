import os
import csv
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# Tạo các tệp tin cần thiết (CSV) nếu chưa có
DATA_FILE = "users_data.csv"

# Hàm thêm người dùng vào file CSV
def add_user_to_csv(user_id, username):
    if not os.path.exists(DATA_FILE):
        # Tạo tệp mới và thêm header nếu không tồn tại
        with open(DATA_FILE, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["User ID", "Username", "Timestamp"])
    
    # Thêm thông tin người dùng vào file CSV
    with open(DATA_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])

# Hàm xử lý lệnh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # Lưu thông tin người dùng vào CSV
    add_user_to_csv(user_id, username)

    # Tạo bàn phím inline
    keyboard = [
        [InlineKeyboardButton("🛒 Mua sản phẩm", callback_data='buy')],
        [InlineKeyboardButton("📄 Lịch sử mua hàng", callback_data='history')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Gửi tin nhắn chào mừng
    await update.message.reply_text(
        f"Chào <b>{username}</b>! Chúc bạn có những trải nghiệm tuyệt vời.\n\nChọn một trong các tùy chọn dưới đây:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# Hàm xử lý lệnh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Đây là bot mẫu. Sử dụng các lệnh sau:\n/start - Bắt đầu sử dụng bot.\n/help - Hướng dẫn sử dụng.")

# Hàm xử lý hành động từ InlineKeyboard
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # Trả lời callback query

    if query.data == 'buy':
        # Tùy chỉnh hành động khi người dùng chọn "Mua sản phẩm"
        await query.edit_message_text(text="🛒 Bạn đã chọn mua sản phẩm.")
    elif query.data == 'history':
        # Tùy chỉnh hành động khi người dùng chọn "Lịch sử mua hàng"
        await query.edit_message_text(text="📜 Đây là lịch sử mua hàng của bạn.")

# Hàm đọc lịch sử mua hàng từ file CSV
def get_purchase_history(user_id):
    history = []
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, mode='r', newline='', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                if row[0] == str(user_id):  # Kiểm tra ID người dùng
                    history.append(row)
    return history

# Hàm hiển thị lịch sử mua hàng
async def show_purchase_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    history = get_purchase_history(user_id)
    if history:
        message = "📜 Lịch sử mua hàng của bạn:\n"
        for record in history:
            message += f"Thời gian: {record[2]}\nSản phẩm: {record[1]}\n---\n"
    else:
        message = "Bạn chưa có lịch sử mua hàng."

    await update.message.reply_text(message)

# Main function để cấu hình và chạy bot
async def main() -> None:
    # Tạo ứng dụng bot
    application = ApplicationBuilder().token('YOUR_BOT_TOKEN').build()
    # Đăng ký các handler cho bot
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Text, show_purchase_history))

    # Chạy bot
    await application.run_polling()

# Để chạy bot, gọi hàm main() khi script được chạy
if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
